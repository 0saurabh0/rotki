from enum import Enum
from typing import Dict, Literal, NamedTuple, Optional

from rotkehlchen.accounting.structures.base import HistoryEventSubType, HistoryEventType
from rotkehlchen.assets.asset import Asset
from rotkehlchen.fval import FVal


class ActionItem(NamedTuple):
    """Action items to propagate to other decoders during decoding"""
    action: str
    sequence_index: int
    from_event_type: HistoryEventType
    from_event_subtype: HistoryEventSubType
    asset: Asset
    amount: FVal
    to_event_type: Optional[HistoryEventType] = None
    to_event_subtype: Optional[HistoryEventSubType] = None
    to_notes: Optional[str] = None
    to_counterparty: Optional[str] = None
    extras: Optional[Dict] = None


class TxMultitakeTreatment(Enum):
    SWAP = 0


class TxEventSettings(NamedTuple):
    """Settings for an event generated by a decoder"""
    taxable: bool
    count_entire_amount_spend: bool
    count_cost_basis_pnl: bool
    take: int
    method: Literal['acquisition', 'spend']
    multitake_treatment: Optional[TxMultitakeTreatment] = None
