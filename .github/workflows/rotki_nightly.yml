name: Rotki Nightly Tests

on:
  schedule:
    - cron: "0 0 * * *"
  push:
    branches:
      - tests

jobs:
  linux:
    uses: ./.github/workflows/task_backend_tests.yml
    with:
      os: ubuntu-20.04
      test_environment: nightly
    secrets: inherit

  macos:
    uses: ./.github/workflows/task_backend_tests.yml
    if: ${{ always() }}
    needs: ['linux']
    with:
      os: macos-latest
      test_environment: nightly
    secrets: inherit

  e2e:
    uses:  ./.github/workflows/task_e2e_tests.yml
    if: ${{ always() }}
    needs: [ 'macos' ]
    secrets: inherit

  unittest-frontend:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
      - name: Load env
        uses: rotki/action-env@v1
        with:
          env_file: .github/.env.ci
      - name: Setup node
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/Cypress
            ${{ steps.pnpm-cache.outputs.STORE_PATH }}
            frontend/app/components.d.ts
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
      - name: Install dependencies
        working-directory: ./frontend
        run: pnpm install --frozen-lockfile
      - name: Run unit tests
        working-directory: ./frontend/app
        run: pnpm run --filter rotki test:unit
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          flags: frontend_unit
          working-directory: ./frontend/app

  notify:
    name: 'Success check'
    if: ${{ always() }}
    needs: [ 'linux', 'macos' ]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 1
      - name: Check if any task failed
        run: |
          pip install requests

          data=($(echo "${{ toJSON(needs.*.result) }}" | sed 's/[][,]//g'))
          for i in "${data[@]}"
          do
            if [[ $i == "failure" ]]; then
                ./.github/scripts/notifier.py --webhook ${{ secrets.WEBHOOK }} --run-id ${{ github.run_id }} --test
                exit 1;
            fi
          done
